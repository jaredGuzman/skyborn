---
import BlogLayout from '../../layouts/BlogLayout.astro'
import Pagination from '../../components/Pagination.astro'
import BlogCard from '../../components/BlogCard.astro'
import type { GetStaticPaths } from 'astro'

import { getBlogPosts } from '../../components/BlogCollection.astro'

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const posts = await getBlogPosts()

  // Sort posts by date using the correct data structure
  const sortedPosts = posts.sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  })

  // Transform the posts to match your blog structure
  const transformedPosts = sortedPosts.map((post) => ({
    slug: post.slug,
    data: {
      title: post.data.title,
      thumbnail: post.data.thumbnail,
      excerpt: post.data.excerpt,
    },
  }))

  return paginate(transformedPosts, { pageSize: 6 })
}

const { page } = Astro.props
---

<BlogLayout
  title="Blog"
  description="Welcome to our blog! Here you can find all the latest news and updates from our team."
  isPost={false}
  date={null}
  image={null}
>
  <section class="my-12">
    <div class="container">
      <p class="text-sm"><em>Post {page.start + 1} through {page.end + 1} of {page.total} total posts</em></p>
      <ul class="my-3">
        {
          page.data.map((post) => (
            <li>
              <BlogCard post={post} />
            </li>
          ))
        }
      </ul>
      <div class="mt-12 grid place-content-center">
        <Pagination
          firstPage={page.url.prev ? '/blog' : null}
          previousPage={page.url.prev ? page.url.prev : null}
          nextPage={page.url.next ? page.url.next : null}
          lastPage={page.url.next ? `/blog/${Math.round(page.total / page.size)}` : null}
          currentPage={page.currentPage}
          totalPages={Math.round(page.total / page.size)}
        />
      </div>
    </div>
  </section>
</BlogLayout>

<style lang="scss">
  ul {
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: 4rem;

    @media (min-width: 550px) {
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 2rem;
    }

    @media (min-width: 950px) {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style>
