---
interface Props {
  initialMode?: 'light' | 'dark' | 'auto'
}

const { initialMode = 'auto' } = Astro.props
---

<div class="theme-toggle">
  <label class="toggle-label">
    <input
      type="checkbox"
      id="theme-toggle"
      class="sr-only"
      aria-label="Toggle Dark Mode"
      data-initial-mode={initialMode}
      transition:persist
    />
    <div class="toggle-track">
      <div class="toggle-icons">
        <div class="sun-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clipRule="evenodd" />
          </svg>
        </div>
        <div class="moon-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        </div>
      </div>
      <div class="toggle-thumb"></div>
    </div>
    <div class="toggle-text">
      <span>Toggle Dark Mode</span>
    </div>
  </label>
</div>

<style lang="scss">
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;

    .toggle-label {
      position: relative;
      display: inline-flex;
      align-items: center;
      cursor: pointer;
      user-select: none;
      gap: 0.5rem;
    }

    .toggle-track {
      position: relative;
      width: 3.25rem;
      height: 1.5rem;
      background: var(--neutral-background);
      border-radius: 9999px;
      transition: background-color var(--transition-duration) var(--transition-timing);
    }

    .toggle-icons {
      position: absolute;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: space-between;
      padding: 0.25rem;

      svg {
        width: 1rem;
        height: 1rem;
      }

      .sun-icon {
        color: var(--action-color);
      }

      .moon-icon {
        color: var(--font-color);
      }
    }

    .toggle-thumb {
      position: absolute;
      left: 0.125rem;
      top: 0.125rem;
      width: 1.25rem;
      height: 1.25rem;
      background: var(--background);
      border-radius: 50%;
      transition: transform var(--transition-duration) var(--transition-timing);
      transform: translateZ(0);
      will-change: transform;
    }

    input:checked ~ .toggle-track .toggle-thumb {
      transform: translateX(1.75rem);
    }

    .toggle-text {
      font-family: var(--font-family-regular);
      font-weight: 200;
    }
  }
</style>

<script is:inline define:vars={{ initialMode }}>
  const darkMode = localStorage.getItem('darkMode')
  const themeToggle = document.querySelector('#theme-toggle')
  const root = document.documentElement

  const enableDarkMode = (store = true) => {
    root.classList.add('darkmode')
    root.style.colorScheme = 'dark'
    themeToggle.checked = true
    if (store) localStorage.setItem('darkMode', 'enabled')
  }

  const disableDarkMode = (store = true) => {
    root.classList.remove('darkmode')
    root.style.colorScheme = 'light'
    themeToggle.checked = false
    if (store) localStorage.setItem('darkMode', 'disabled')
  }

  const checkPreference = () => {
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      enableDarkMode(false)
    } else {
      disableDarkMode(false)
    }
  }

  const initializeDarkMode = () => {
    if (darkMode) {
      darkMode === 'enabled' ? enableDarkMode() : disableDarkMode()
      return
    }

    switch (initialMode) {
      case 'dark': enableDarkMode(); break;
      case 'light': disableDarkMode(); break;
      default: checkPreference();
    }
  }

  initializeDarkMode()

  themeToggle.addEventListener('change', () => {
    themeToggle.checked ? enableDarkMode() : disableDarkMode()
  })

  document.addEventListener('astro:after-swap', initializeDarkMode)
</script>