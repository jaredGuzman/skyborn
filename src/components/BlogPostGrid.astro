---
import BlogCard from './BlogCard.astro'
const { latestPosts } = Astro.props
---

<div
  id="blog-grid"
  role="feed"
  aria-label="Blog posts grid"
  class="grid grid-cols-1 gap-12 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5"
>
  {
    latestPosts.map((post: any) => {
      return <BlogCard post={post} />
    })
  }
</div>

<script>
  function updateVisiblePosts() {
    const grid = document.getElementById('blog-grid')
    if (!grid) return

    const posts = grid.querySelectorAll('.post-item')
    let visibleColumns = 1

    const width = window.innerWidth
    if (width >= 1280)
      visibleColumns = 5 // xl
    else if (width >= 1024)
      visibleColumns = 4 // lg
    else if (width >= 768)
      visibleColumns = 3 // md
    else visibleColumns = 1

    const computedStyle = window.getComputedStyle(grid)
    const columns = computedStyle.gridTemplateColumns.split(' ').length

    posts.forEach((post, index) => {
      if (index < visibleColumns) {
        post.classList.remove('hidden')
      } else {
        post.classList.add('hidden')
      }
    })
  }

  function setupGridListeners() {
    window.removeEventListener('resize', updateVisiblePosts)
    window.removeEventListener('load', updateVisiblePosts)

    window.addEventListener('resize', updateVisiblePosts)
    // Instead of 'load', use 'DOMContentLoaded' or immediate execution
    updateVisiblePosts() // Run immediately
  }

  document.addEventListener('astro:page-load', setupGridListeners, { once: false })

  // Also run setup when the document becomes visible again
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      setupGridListeners()
    }
  })
</script>
